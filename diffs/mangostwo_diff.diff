diff --git a/src/game/Object/Creature.cpp b/src/game/Object/Creature.cpp
index 1d8520b..ad43db6 100644
--- a/src/game/Object/Creature.cpp
+++ b/src/game/Object/Creature.cpp
@@ -58,6 +58,7 @@
 #ifdef ENABLE_ELUNA
 #include "LuaEngine.h"
 #endif /* ENABLE_ELUNA */
+#include "MercenaryMgr.h"
 
 // apply implementation of the singletons
 #include "Policies/Singleton.h"
@@ -305,6 +306,11 @@ bool Creature::InitEntry(uint32 Entry, CreatureData const* data /*=NULL*/, GameE
         return false;
     }
 
+    if (GetScriptName() == sMercenaryMgr->GetAIName())
+        SetFlag(UNIT_FIELD_FLAGS_2, 16);
+    else
+        RemoveFlag(UNIT_FIELD_FLAGS_2, 16);
+
     CreatureModelInfo const* minfo = sObjectMgr.GetCreatureModelRandomGender(display_id);
     if (!minfo)                                             // Cancel load if no model defined
     {
@@ -409,6 +415,10 @@ bool Creature::UpdateEntry(uint32 Entry, Team team, const CreatureData* data /*=
         { unitFlags |= UNIT_FLAG_IN_COMBAT; }
 
     SetUInt32Value(UNIT_FIELD_FLAGS, unitFlags);
+    if (GetScriptName() == sMercenaryMgr->GetAIName())
+        SetUInt32Value(UNIT_FIELD_FLAGS_2,  16);
+    else
+        SetUInt32Value(UNIT_FIELD_FLAGS_2, 0);
 
     // preserve all current dynamic flags if exist
     uint32 dynFlags = GetUInt32Value(UNIT_DYNAMIC_FLAGS);
diff --git a/src/game/Object/CreatureAISelector.cpp b/src/game/Object/CreatureAISelector.cpp
index 7f54402..115e611 100644
--- a/src/game/Object/CreatureAISelector.cpp
+++ b/src/game/Object/CreatureAISelector.cpp
@@ -30,6 +30,7 @@
 #include "MovementGenerator.h"
 #include "ScriptMgr.h"
 #include "Pet.h"
+#include "MercenaryMgr.h"
 
 INSTANTIATE_SINGLETON_1(CreatureAIRegistry);
 INSTANTIATE_SINGLETON_1(MovementGeneratorRegistry);
@@ -39,7 +40,7 @@ namespace FactorySelector
     CreatureAI* selectAI(Creature* creature)
     {
         // Allow scripting AI for normal creatures and not controlled pets (guardians and mini-pets)
-        if ((!creature->IsPet() || !((Pet*)creature)->isControlled()) && !creature->IsCharmed())
+        if (creature->GetScriptName() == sMercenaryMgr->GetAIName() || (!creature->IsPet() || !((Pet*)creature)->isControlled()) && !creature->IsCharmed())
             if (CreatureAI* scriptedAI = sScriptMgr.GetCreatureAI(creature))
                 { return scriptedAI; }
 
diff --git a/src/game/Object/Pet.cpp b/src/game/Object/Pet.cpp
index 10f9aa6..96dc32e 100644
--- a/src/game/Object/Pet.cpp
+++ b/src/game/Object/Pet.cpp
@@ -33,6 +33,7 @@
 #include "CreatureAI.h"
 #include "Unit.h"
 #include "Util.h"
+#include "MercenaryMgr.h"
 
 Pet::Pet(PetType type) :
     Creature(CREATURE_SUBTYPE_PET),
@@ -304,6 +305,7 @@ bool Pet::LoadPetFromDB(Player* owner, uint32 petentry, uint32 petnumber, bool c
     _LoadSpellCooldowns();
 
     owner->SetPet(this);                                    // in DB stored only full controlled creature
+    sMercenaryMgr->OnSummon(owner);
     DEBUG_LOG("New Pet has guid %u", GetGUIDLow());
 
     if (owner->GetTypeId() == TYPEID_PLAYER)
@@ -481,6 +483,8 @@ void Pet::DeleteFromDB(uint32 guidlow, bool separate_transaction)
     stmt = CharacterDatabase.CreateStatement(delSpellCD, "DELETE FROM pet_spell_cooldown WHERE guid = ?");
     stmt.PExecute(guidlow);
 
+    sMercenaryMgr->OnDelete(guidlow);
+
     if (separate_transaction)
         { CharacterDatabase.CommitTransaction(); }
 }
diff --git a/src/game/Object/PetAI.cpp b/src/game/Object/PetAI.cpp
index 3d75f73..f5f1d3a 100644
--- a/src/game/Object/PetAI.cpp
+++ b/src/game/Object/PetAI.cpp
@@ -132,7 +132,6 @@ void PetAI::UpdateAI(const uint32 diff)
         { return; }
 
     Unit* owner = m_creature->GetCharmerOrOwner();
-    
     // Despawn minion/pet if owner dies
     if (owner->IsDead())
     {
diff --git a/src/game/Object/Player.cpp b/src/game/Object/Player.cpp
index 92e31d3..ea6e4b3 100644
--- a/src/game/Object/Player.cpp
+++ b/src/game/Object/Player.cpp
@@ -76,6 +76,7 @@
 #ifdef ENABLE_ELUNA
 #include "LuaEngine.h"
 #endif /*ENABLE_ELUNA*/
+#include "MercenaryMgr.h"
 
 #include <cmath>
 
@@ -17416,7 +17417,10 @@ void Player::SaveToDB()
 
     // save pet (hunter pet level and experience and all type pets health/mana).
     if (Pet* pet = GetPet())
+    {
         pet->SavePetToDB(PET_SAVE_AS_CURRENT);
+        sMercenaryMgr->OnSave(this, pet);
+    }
 }
 
 // fast save function for item/money cheating preventing - save only inventory and money state
diff --git a/src/game/Object/StatSystem.cpp b/src/game/Object/StatSystem.cpp
index 6a30d7e..4e37dd7 100644
--- a/src/game/Object/StatSystem.cpp
+++ b/src/game/Object/StatSystem.cpp
@@ -28,6 +28,7 @@
 #include "Creature.h"
 #include "SharedDefines.h"
 #include "SpellAuras.h"
+#include "MercenaryMgr.h"
 
 /*#######################################
 ########                         ########
@@ -826,6 +827,9 @@ bool Creature::UpdateStats(Stats /*stat*/)
 
 bool Creature::UpdateAllStats()
 {
+    if (GetScriptName() == sMercenaryMgr->GetAIName())
+        return false;
+
     UpdateMaxHealth();
     UpdateAttackPowerAndDamage();
 
@@ -851,18 +855,27 @@ void Creature::UpdateResistances(uint32 school)
 
 void Creature::UpdateArmor()
 {
+   if (GetScriptName() == sMercenaryMgr->GetAIName())
+       return;
+
     float value = GetTotalAuraModValue(UNIT_MOD_ARMOR);
     SetArmor(int32(value));
 }
 
 void Creature::UpdateMaxHealth()
 {
+    if (GetScriptName() == sMercenaryMgr->GetAIName())
+        return;
+
     float value = GetTotalAuraModValue(UNIT_MOD_HEALTH);
     SetMaxHealth((uint32)value);
 }
 
 void Creature::UpdateMaxPower(Powers power)
 {
+    if (GetScriptName() == sMercenaryMgr->GetAIName())
+        return;
+
     UnitMods unitMod = UnitMods(UNIT_MOD_POWER_START + power);
 
     float value  = GetTotalAuraModValue(unitMod);
@@ -871,6 +884,9 @@ void Creature::UpdateMaxPower(Powers power)
 
 void Creature::UpdateAttackPowerAndDamage(bool ranged)
 {
+    if (GetScriptName() == sMercenaryMgr->GetAIName())
+        return;
+
     UnitMods unitMod = ranged ? UNIT_MOD_ATTACK_POWER_RANGED : UNIT_MOD_ATTACK_POWER;
 
     uint16 index = UNIT_FIELD_ATTACK_POWER;
@@ -905,6 +921,9 @@ void Creature::UpdateDamagePhysical(WeaponAttackType attType)
     if (attType > OFF_ATTACK)
         { return; }
 
+    if (GetScriptName() == sMercenaryMgr->GetAIName())
+        return;
+
     UnitMods unitMod = (attType == BASE_ATTACK ? UNIT_MOD_DAMAGE_MAINHAND : UNIT_MOD_DAMAGE_OFFHAND);
 
     /* difference in AP between current attack power and base value from DB */
@@ -936,6 +955,9 @@ bool Pet::UpdateStats(Stats stat)
     if (stat > STAT_SPIRIT)
         { return false; }
 
+    if (GetScriptName() == sMercenaryMgr->GetAIName())
+        return false;
+
     // value = ((base_value * base_pct) + total_value) * total_pct
     float value  = GetTotalStatValue(stat);
 
@@ -1001,6 +1023,9 @@ void Pet::UpdateResistances(uint32 school)
 
 void Pet::UpdateArmor()
 {
+    if (GetScriptName() == sMercenaryMgr->GetAIName())
+        return;
+
     float value = 0.0f;
     float bonus_armor = 0.0f;
     UnitMods unitMod = UNIT_MOD_ARMOR;
@@ -1021,6 +1046,9 @@ void Pet::UpdateArmor()
 
 void Pet::UpdateMaxHealth()
 {
+    if (GetScriptName() == sMercenaryMgr->GetAIName())
+        return;
+
     UnitMods unitMod = UNIT_MOD_HEALTH;
     float stamina = GetStat(STAT_STAMINA) - GetCreateStat(STAT_STAMINA);
 
@@ -1034,6 +1062,9 @@ void Pet::UpdateMaxHealth()
 
 void Pet::UpdateMaxPower(Powers power)
 {
+    if (GetScriptName() == sMercenaryMgr->GetAIName())
+        return;
+
     UnitMods unitMod = UnitMods(UNIT_MOD_POWER_START + power);
 
     float addValue = (power == POWER_MANA) ? GetStat(STAT_INTELLECT) - GetCreateStat(STAT_INTELLECT) : 0.0f;
@@ -1051,6 +1082,9 @@ void Pet::UpdateAttackPowerAndDamage(bool ranged)
     if (ranged)
         { return; }
 
+    if (GetScriptName() == sMercenaryMgr->GetAIName())
+        return;
+
     float val = 0.0f;
     float bonusAP = 0.0f;
     UnitMods unitMod = UNIT_MOD_ATTACK_POWER;
@@ -1111,6 +1145,9 @@ void Pet::UpdateDamagePhysical(WeaponAttackType attType)
     if (attType > BASE_ATTACK)
         { return; }
 
+    if (GetScriptName() == sMercenaryMgr->GetAIName())
+        return;
+
     UnitMods unitMod = UNIT_MOD_DAMAGE_MAINHAND;
 
     float att_speed = float(GetAttackTime(BASE_ATTACK)) / 1000.0f;
diff --git a/src/game/Server/DBCStores.cpp b/src/game/Server/DBCStores.cpp
index 18456d2..f0c4110 100644
--- a/src/game/Server/DBCStores.cpp
+++ b/src/game/Server/DBCStores.cpp
@@ -119,7 +119,7 @@ DBCStorage <ItemEntry>                    sItemStore(Itemfmt);
 DBCStorage <ItemBagFamilyEntry>           sItemBagFamilyStore(ItemBagFamilyfmt);
 DBCStorage <ItemClassEntry>               sItemClassStore(ItemClassfmt);
 // DBCStorage <ItemCondExtCostsEntry> sItemCondExtCostsStore(ItemCondExtCostsEntryfmt);
-// DBCStorage <ItemDisplayInfoEntry> sItemDisplayInfoStore(ItemDisplayTemplateEntryfmt); -- not used currently
+DBCStorage <ItemDisplayInfoEntry> sItemDisplayInfoStore(ItemDisplayTemplateEntryfmt);
 DBCStorage <ItemExtendedCostEntry> sItemExtendedCostStore(ItemExtendedCostEntryfmt);
 DBCStorage <ItemLimitCategoryEntry> sItemLimitCategoryStore(ItemLimitCategoryEntryfmt);
 DBCStorage <ItemRandomPropertiesEntry> sItemRandomPropertiesStore(ItemRandomPropertiesfmt);
@@ -169,6 +169,7 @@ DBCStorage <SpellRadiusEntry> sSpellRadiusStore(SpellRadiusfmt);
 DBCStorage <SpellRangeEntry> sSpellRangeStore(SpellRangefmt);
 DBCStorage <SpellRuneCostEntry> sSpellRuneCostStore(SpellRuneCostfmt);
 DBCStorage <SpellShapeshiftFormEntry> sSpellShapeshiftFormStore(SpellShapeshiftFormfmt);
+DBCStorage <SpellIconEntry> sSpellIconStore(SpellIconEntryfmt);
 DBCStorage <StableSlotPricesEntry> sStableSlotPricesStore(StableSlotPricesfmt);
 DBCStorage <SummonPropertiesEntry> sSummonPropertiesStore(SummonPropertiesfmt);
 DBCStorage <TalentEntry> sTalentStore(TalentEntryfmt);
@@ -459,7 +460,7 @@ void LoadDBCStores(const std::string& dataPath)
     LoadDBC(availableDbcLocales, bar, bad_dbc_files, sItemStore,                dbcPath, "Item.dbc");
     LoadDBC(availableDbcLocales, bar, bad_dbc_files, sItemBagFamilyStore,       dbcPath, "ItemBagFamily.dbc");
     LoadDBC(availableDbcLocales, bar, bad_dbc_files, sItemClassStore,           dbcPath, "ItemClass.dbc");
-    // LoadDBC(availableDbcLocales,bar,bad_dbc_files,sItemDisplayInfoStore,     dbcPath,"ItemDisplayInfo.dbc");     -- not used currently
+    LoadDBC(availableDbcLocales, bar, bad_dbc_files, sItemDisplayInfoStore,     dbcPath,"ItemDisplayInfo.dbc");
     // LoadDBC(availableDbcLocales,bar,bad_dbc_files,sItemCondExtCostsStore,    dbcPath,"ItemCondExtCosts.dbc");
     LoadDBC(availableDbcLocales, bar, bad_dbc_files, sItemExtendedCostStore,    dbcPath, "ItemExtendedCost.dbc");
     LoadDBC(availableDbcLocales, bar, bad_dbc_files, sItemLimitCategoryStore,   dbcPath, "ItemLimitCategory.dbc");
@@ -545,6 +546,7 @@ void LoadDBCStores(const std::string& dataPath)
     LoadDBC(availableDbcLocales, bar, bad_dbc_files, sSpellRangeStore,          dbcPath, "SpellRange.dbc");
     LoadDBC(availableDbcLocales, bar, bad_dbc_files, sSpellRuneCostStore,       dbcPath, "SpellRuneCost.dbc");
     LoadDBC(availableDbcLocales, bar, bad_dbc_files, sSpellShapeshiftFormStore, dbcPath, "SpellShapeshiftForm.dbc");
+    LoadDBC(availableDbcLocales, bar, bad_dbc_files, sSpellIconStore,           dbcPath, "SpellIcon.dbc");
     LoadDBC(availableDbcLocales, bar, bad_dbc_files, sStableSlotPricesStore,    dbcPath, "StableSlotPrices.dbc");
     LoadDBC(availableDbcLocales, bar, bad_dbc_files, sSummonPropertiesStore,    dbcPath, "SummonProperties.dbc");
     LoadDBC(availableDbcLocales, bar, bad_dbc_files, sTalentStore,              dbcPath, "Talent.dbc");
diff --git a/src/game/Server/DBCStores.h b/src/game/Server/DBCStores.h
index 2345875..84ee99e 100644
--- a/src/game/Server/DBCStores.h
+++ b/src/game/Server/DBCStores.h
@@ -151,7 +151,7 @@ extern DBCStorage <HolidaysEntry>                sHolidaysStore;
 extern DBCStorage <ItemEntry>                    sItemStore;
 extern DBCStorage <ItemBagFamilyEntry>           sItemBagFamilyStore;
 extern DBCStorage <ItemClassEntry>               sItemClassStore;
-// extern DBCStorage <ItemDisplayInfoEntry>      sItemDisplayInfoStore; -- not used currently
+extern DBCStorage <ItemDisplayInfoEntry>      sItemDisplayInfoStore;
 extern DBCStorage <ItemExtendedCostEntry>        sItemExtendedCostStore;
 extern DBCStorage <ItemLimitCategoryEntry>       sItemLimitCategoryStore;
 extern DBCStorage <ItemRandomPropertiesEntry>    sItemRandomPropertiesStore;
@@ -191,6 +191,7 @@ extern DBCStorage <SpellRangeEntry>              sSpellRangeStore;
 extern DBCStorage <SpellRuneCostEntry>           sSpellRuneCostStore;
 extern DBCStorage <SpellShapeshiftFormEntry>     sSpellShapeshiftFormStore;
 extern DBCStorage <SpellEntry>                   sSpellStore;
+extern DBCStorage <SpellIconEntry>               sSpellIconStore;
 extern DBCStorage <StableSlotPricesEntry>        sStableSlotPricesStore;
 extern DBCStorage <SummonPropertiesEntry>        sSummonPropertiesStore;
 extern DBCStorage <TalentEntry>                  sTalentStore;
diff --git a/src/game/Server/DBCStructure.h b/src/game/Server/DBCStructure.h
index 6e38f59..90b1035 100644
--- a/src/game/Server/DBCStructure.h
+++ b/src/game/Server/DBCStructure.h
@@ -1135,6 +1135,7 @@ struct ItemClassEntry
 struct ItemDisplayInfoEntry
 {
     uint32      ID;                                         // 0        m_ID
+    char* inventoryIcon;
     // 1        m_modelName[2]
     // 2        m_modelTexture[2]
     // 3        m_inventoryIcon
@@ -1914,6 +1915,12 @@ struct SpellItemEnchantmentConditionEntry
     // uint8   Logic[5]                                     // 25-30    m_logic[5]
 };
 
+struct SpellIconEntry
+{
+    uint32 ID;                                              // 0
+    char* spellIcon;                                        // 1
+};
+
 struct StableSlotPricesEntry
 {
     uint32 Slot;                                            //          m_ID
diff --git a/src/game/Server/DBCfmt.h b/src/game/Server/DBCfmt.h
index 41655b3..e217622 100644
--- a/src/game/Server/DBCfmt.h
+++ b/src/game/Server/DBCfmt.h
@@ -75,7 +75,7 @@ const char Holidaysfmt[] = "nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 const char Itemfmt[] = "niiiiiii";
 const char ItemBagFamilyfmt[] = "nxxxxxxxxxxxxxxxxx";
 const char ItemClassfmt[] = "nxxssssssssssssssssx";
-// const char ItemDisplayTemplateEntryfmt[]="nxxxxxxxxxxixxxxxxxxxxx";
+const char ItemDisplayTemplateEntryfmt[] = "nxxxxsxxxxxxxxxxxxxxxxxxx";
 // const char ItemCondExtCostsEntryfmt[]="xiii";
 const char ItemExtendedCostEntryfmt[] = "niiiiiiiiiiiiiix";
 const char ItemLimitCategoryEntryfmt[] = "nxxxxxxxxxxxxxxxxxii";
@@ -113,6 +113,7 @@ const char SpellRadiusfmt[] = "nfxx";
 const char SpellRangefmt[] = "nffffxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
 const char SpellRuneCostfmt[] = "niiii";
 const char SpellShapeshiftFormfmt[] = "nxxxxxxxxxxxxxxxxxxiixiiixxiiiiiiii";
+char const SpellIconEntryfmt[] = "ns";
 const char StableSlotPricesfmt[] = "ni";
 const char SummonPropertiesfmt[] = "niiiii";
 const char TalentEntryfmt[] = "niiiiiiiixxxxixxixxxxxx";
diff --git a/src/game/WorldHandlers/SpellHandler.cpp b/src/game/WorldHandlers/SpellHandler.cpp
index f1d7035..1b0a5c1 100644
--- a/src/game/WorldHandlers/SpellHandler.cpp
+++ b/src/game/WorldHandlers/SpellHandler.cpp
@@ -34,6 +34,7 @@
 #include "ScriptMgr.h"
 #include "Totem.h"
 #include "SpellAuras.h"
+#include "MercenaryMgr.h"
 
 void WorldSession::HandleUseItemOpcode(WorldPacket& recvPacket)
 {
@@ -653,6 +654,39 @@ void WorldSession::HandleGetMirrorimageData(WorldPacket& recv_data)
     if (!pCreature)
         return;
 
+    if (pCreature->IsPet())
+    {
+        Mercenary* mercenary = sMercenaryMgr->GetMercenary(pCreature->GetCharmInfo()->GetPetNumber());
+        if (mercenary)
+        {
+            WorldPacket data(SMSG_MIRRORIMAGE_DATA, 68);
+            data << pCreature->GetObjectGuid();
+            data << uint32(mercenary->GetDisplay());
+            data << uint8(mercenary->GetRace());
+            data << uint8(mercenary->GetGender());
+            data << uint8(1);
+            data << uint8(0); // Skin
+            data << uint8(0); // Face
+            data << uint8(0); // Hair
+            data << uint8(0); // Hair color
+            data << uint8(0); // Facial hair
+            data << uint32(0);
+            data << uint32(sMercenaryMgr->GetItemDisplayId(mercenary->GetItemBySlot(SLOT_HEAD)));
+            data << uint32(sMercenaryMgr->GetItemDisplayId(mercenary->GetItemBySlot(SLOT_SHOULDERS)));
+            data << uint32(0); // Shirt?
+            data << uint32(sMercenaryMgr->GetItemDisplayId(mercenary->GetItemBySlot(SLOT_CHEST)));
+            data << uint32(0); // Waist
+            data << uint32(sMercenaryMgr->GetItemDisplayId(mercenary->GetItemBySlot(SLOT_LEGS)));
+            data << uint32(sMercenaryMgr->GetItemDisplayId(mercenary->GetItemBySlot(SLOT_FEET)));
+            data << uint32(0); // Wrists
+            data << uint32(sMercenaryMgr->GetItemDisplayId(mercenary->GetItemBySlot(SLOT_HANDS)));
+            data << uint32(0); // Cloak
+            data << uint32(0); // Tabard
+            SendPacket(&data);
+            return;
+        }
+    }
+
     Unit::AuraList const& images = pCreature->GetAurasByType(SPELL_AURA_MIRROR_IMAGE);
 
     if (images.empty())
diff --git a/src/game/WorldHandlers/World.cpp b/src/game/WorldHandlers/World.cpp
index c36946e..209f7e8 100644
--- a/src/game/WorldHandlers/World.cpp
+++ b/src/game/WorldHandlers/World.cpp
@@ -77,6 +77,7 @@
 #ifdef ENABLE_ELUNA
 #include "LuaEngine.h"
 #endif /*ENABLE_ELUNA*/
+#include "MercenaryMgr.h"
 
 // Warden
 #include "WardenCheckMgr.h"
@@ -1448,6 +1449,8 @@ void World::SetInitialWorldSettings()
     sEluna->OnConfigLoad(false); // Must be done after Eluna is initialized and scripts have run.
 #endif
 
+    sMercenaryMgr->LoadMercenaries();
+
     sLog.outString("WORLD: World initialized");
 
     uint32 uStartInterval = WorldTimer::getMSTimeDiff(uStartTime, WorldTimer::getMSTime());
diff --git a/src/modules/SD2/system/ScriptLoader.cpp b/src/modules/SD2/system/ScriptLoader.cpp
index 9b2cf13..76e5853 100644
--- a/src/modules/SD2/system/ScriptLoader.cpp
+++ b/src/modules/SD2/system/ScriptLoader.cpp
@@ -927,6 +927,7 @@ void AddSC_npcs_special();
 void AddSC_spell_scripts();
 void AddSC_world_map_scripts();
 void AddSC_world_map_ebon_hold();
+void MercenarySetup();
 
 void AddWorldScripts()
 {
@@ -941,6 +942,7 @@ void AddWorldScripts()
     AddSC_spell_scripts();
     AddSC_world_map_scripts();
     AddSC_world_map_ebon_hold();
+    MercenarySetup();
 }
 
 // battlegrounds
